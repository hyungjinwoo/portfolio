/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2019-06-12 00:32:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.map;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class map_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("  ");

/*      float lat=(Float)request.getAttribute("lat");
    float lng=(Float)request.getAttribute("lng"); */
    float lat=37.49794199999999f;
    float lng=127.02762099999995f;
  
      out.write("\r\n");
      out.write("  \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>  \r\n");
      out.write("<head>    \r\n");
      out.write("<title>위도 경도 찾기</title>\r\n");
      out.write("\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath());
      out.write("/js/jquery-3.4.0.js\"></script>\r\n");
      out.write("<!-- https://developers.google.com/maps/get-started/?hl=ko, 구글에서 api key 발급 -->\r\n");
      out.write("<script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyB2BbISLnHXNWyIA3jjgUEg8q-R-71NlzY&callback=initMap&libraries=places\" async defer></script>\r\n");
      out.write("<style>\r\n");
      out.write("@import url('https://fonts.googleapis.com/css?family=Montserrat|Oxygen|Poiret+One|Nanum+Gothic|Song+Myung&display=swap');\r\n");
      out.write("\r\n");
      out.write("form { margin:0px; }\r\n");
      out.write("\r\n");
      out.write("#map_canvas {\r\n");
      out.write("  height: 92%;\r\n");
      out.write("  width : 100%;\r\n");
      out.write("}\r\n");
      out.write("/* Optional: Makes the sample page fill the window. */\r\n");
      out.write("html, body {\r\n");
      out.write("  height: 100%;\r\n");
      out.write("  margin: 0;\r\n");
      out.write("  padding: 0;\r\n");
      out.write("  text-align: center;\r\n");
      out.write("}\r\n");
      out.write("#description {\r\n");
      out.write("  font-family: Roboto;\r\n");
      out.write("  font-size: 25px;\r\n");
      out.write("  font-weight: 300;\r\n");
      out.write("}\r\n");
      out.write("#infowindow-content .title {\r\n");
      out.write("  font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("#infowindow-content {\r\n");
      out.write("  display: none;\r\n");
      out.write("}\r\n");
      out.write("#map_canvas #infowindow-content {\r\n");
      out.write("  display: inline;\r\n");
      out.write("}\r\n");
      out.write(".pac-card {\r\n");
      out.write("  margin: 10px 10px 0 0;\r\n");
      out.write("  border-radius: 2px 0 0 2px;\r\n");
      out.write("  box-sizing: border-box;\r\n");
      out.write("  -moz-box-sizing: border-box;\r\n");
      out.write("  outline: none;\r\n");
      out.write("  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\r\n");
      out.write("  background-color: #fff;\r\n");
      out.write("  font-family: Roboto;\r\n");
      out.write("}\r\n");
      out.write("#pac-container {\r\n");
      out.write("  padding-bottom: 12px;\r\n");
      out.write("  margin-right: 12px;\r\n");
      out.write("}\r\n");
      out.write(".pac-controls {\r\n");
      out.write("  display: inline-block;\r\n");
      out.write("  padding: 5px 11px;\r\n");
      out.write("}\r\n");
      out.write(".pac-controls label {\r\n");
      out.write("  font-family: Roboto;\r\n");
      out.write("  font-size: 13px;\r\n");
      out.write("  font-weight: 300;\r\n");
      out.write("}\r\n");
      out.write("#searchVal {\r\n");
      out.write("  background-color: rgba(255, 255, 255,0.7);\r\n");
      out.write("  font-family:\"Nanum Gothic\", Roboto;\r\n");
      out.write("  font-size: 20px;\r\n");
      out.write("  font-weight: 300;\r\n");
      out.write("  padding: 0 11px 0 13px;\r\n");
      out.write("  text-overflow: ellipsis;\r\n");
      out.write("  width: 250px;\r\n");
      out.write("  margin-top:5px;\r\n");
      out.write("  border-radius: 10px;\r\n");
      out.write("}\r\n");
      out.write("#searchVal:focus {\r\n");
      out.write("  border-color: #4d90fe;\r\n");
      out.write("}\r\n");
      out.write("#setLocationBtn{\r\n");
      out.write("\tborder: none;\r\n");
      out.write("\tborder-radius: 50px;\r\n");
      out.write("\tbackground: lightblue;\r\n");
      out.write("\twidth: 200px;\r\n");
      out.write("\theight: 30px;\r\n");
      out.write("\tfont-family:\"Nanum Gothic\", Roboto;\r\n");
      out.write("\tfont-weight: bold;\r\n");
      out.write("\tfont-size: 18px;\r\n");
      out.write("\tmargin-top: 5px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("    \r\n");
      out.write("    var map;\r\n");
      out.write("    var geocoder;\r\n");
      out.write("    var address;\r\n");
      out.write("    \r\n");
      out.write("//window.onload=load;\r\n");
      out.write("//window.onunload=GUnload;\r\n");
      out.write("//function load()\r\n");
      out.write("//  function initialize()\r\n");
      out.write("    function initMap() {\r\n");
      out.write("    \r\n");
      out.write("    //api 버전 확인\r\n");
      out.write("         console.log('Google Maps API version:' + google.maps.version);\r\n");
      out.write("      \r\n");
      out.write("     //위도,경도\r\n");
      out.write("          var latlng=new google.maps.LatLng(");
      out.print(lat);
      out.write(',');
      out.print(lng);
      out.write(");\r\n");
      out.write("     \r\n");
      out.write("          var mapOptions = {\r\n");
      out.write("              zoom: 18,     //확대 정도\r\n");
      out.write("              center: latlng,  //지도 이미지 가운데지점\r\n");
      out.write("              heading: 0,   //지도 이미지 회전 (default:0)\r\n");
      out.write("              disableDefaultUI: false, //기본 UI 비활성화\r\n");
      out.write("                  zoomControl: true,   //UI:화면 확대/축소\r\n");
      out.write("                  mapTypeControl: true,//UI:지도유형\r\n");
      out.write("                  scaleControl: true,   //UI: 축척요소표시 (기본으로 셋팅 되지 않음)\r\n");
      out.write("                  streetViewControl: true,  //UI: 길거리 뷰\r\n");
      out.write("                  rotateControl: true,     // UI: 화면 회전\r\n");
      out.write("                  fullscreenControl: true,  // UI:전체 화면\r\n");
      out.write("              gestureHandling: 'greedy',  //none:마우스 휠이 브라우저 스크롤만 따라감, \r\n");
      out.write("                                               // cooperative: ctrl+마우스휠 - 지도 확대/축소\r\n");
      out.write("                                               // greedy :(마우스 맵 hover) 마우스휠 - 지도 확대/축소\r\n");
      out.write("              mapTypeId: 'hybrid'   //roadmap : 기본 도로지도보기를 표시 (default)\r\n");
      out.write("                                       //satellite : Google 어스 위성 이미지를 표시\r\n");
      out.write("                                       //hybrid : 정상보기와 위성보기가 혼합되어 표시\r\n");
      out.write("                                       //terrain : 지형 정보를 기반으로 물리적 인지도를 표시\r\n");
      out.write("            };\r\n");
      out.write("      \r\n");
      out.write("    //map\r\n");
      out.write("        map = new google.maps.Map(document.getElementById('map_canvas'),mapOptions); \r\n");
      out.write("        // map객체 동적 반영\r\n");
      out.write("            //map.setTilt(45);  //satellite및 hybrid지도 유형은 가능한 경우 높은 줌 레벨에서 45 ° 이미지를 지원\r\n");
      out.write("                                // 0: 비활성화\r\n");
      out.write("            //map.setMapTypeId('terrain'); //mapTypeId동적 수정\r\n");
      out.write("            //map.setCenter(latlng, 10);\r\n");
      out.write("            //map.setHeading(heading + 90); //지도 이미지 회전 +90도\r\n");
      out.write("            \r\n");
      out.write("            //대중교통 레이어(특정 도시만)\r\n");
      out.write("            /*var transitLayer = new google.maps.TransitLayer();\r\n");
      out.write("                transitLayer.setMap(map); */\r\n");
      out.write("                \r\n");
      out.write("        map.addListener('click', function(results) {\r\n");
      out.write("            \r\n");
      out.write("                if(results.placeId==null){\r\n");
      out.write("                    alert(\"장소을 다시 선택하세요\");\r\n");
      out.write("                }\r\n");
      out.write("                \r\n");
      out.write("                var request = {\r\n");
      out.write("                      placeId: results.placeId\r\n");
      out.write("                    };\r\n");
      out.write("                    service = new google.maps.places.PlacesService(map);\r\n");
      out.write("                    service.getDetails(request, placeInfo);\r\n");
      out.write("                    function placeInfo(place, status) {\r\n");
      out.write("                          console.log(place); \r\n");
      out.write("                          /* console.log(place); */\r\n");
      out.write("                          \r\n");
      out.write("                        $.each(place.address_components, function(index, item){\r\n");
      out.write("                            if(place.address_components[index].types[0]=='country'){\r\n");
      out.write("                                $(\"#ncode\").val(place.address_components[index].short_name);\r\n");
      out.write("                            }\r\n");
      out.write("                        });\r\n");
      out.write("                          \r\n");
      out.write("                        $(\"#photo\").empty();\r\n");
      out.write("                        var a=null;\r\n");
      out.write("                        $.each(place.photos, function(index, item){\r\n");
      out.write("                                a+=\"<img src=\"+place.photos[index].getUrl()+\"/>\";\r\n");
      out.write("                            });\r\n");
      out.write("                        \r\n");
      out.write("                        /* $(\"#photo\").html(a); */\r\n");
      out.write("                        $(\"#inlat\").html(place.geometry.location.lat());\r\n");
      out.write("                        $(\"#inlng\").html(place.geometry.location.lng());\r\n");
      out.write("                        $(\"#placeid\").val(place.place_id);                        \r\n");
      out.write("                        $('#pname').val(place.name);\r\n");
      out.write("                        $('#address').val(place.formatted_address);\r\n");
      out.write("                        $('#phone').val(place.international_phone_number);\r\n");
      out.write("                        $(\"#website\").val(place.website);\r\n");
      out.write("                    }\r\n");
      out.write("            }); // map.listner - end\r\n");
      out.write("            \r\n");
      out.write("    //마커 \r\n");
      out.write("/*     var marker = new google.maps.Marker({\r\n");
      out.write("                    position: latlng,\r\n");
      out.write("                    map: map,\r\n");
      out.write("                    title: 'Click to zoom',\r\n");
      out.write("                   draggable: true  //마커을 다른지역으로 이동가능\r\n");
      out.write("                  }); */\r\n");
      out.write("        \r\n");
      out.write("        //맵의 중 위치 변경시에 3초뒤 마커로 위치 재이동\r\n");
      out.write("         /*map.addListener('center_changed', function() {\r\n");
      out.write("                window.setTimeout(function() {\r\n");
      out.write("                  map.panTo(marker.getPosition());\r\n");
      out.write("                }, 3000);\r\n");
      out.write("              }); */\r\n");
      out.write("           \r\n");
      out.write("        //마커 더블클릭시 이벤트 발생\r\n");
      out.write("/*         marker.addListener('dblclick', function() {\r\n");
      out.write("                map.setZoom(20);\r\n");
      out.write("                map.setCenter(marker.getPosition());\r\n");
      out.write("                marker.setMap(null);  //마커 삭제\r\n");
      out.write("            });\r\n");
      out.write(" */           \r\n");
      out.write("        //마커 더블클릭시 바운스이벤트 발생  \r\n");
      out.write("/*         marker.addListener('click', toggleBounce);\r\n");
      out.write("            function toggleBounce() {\r\n");
      out.write("           //마커의 위도경도 확인\r\n");
      out.write("            console.log(marker.getPosition().lat(),marker.getPosition().lng()); \r\n");
      out.write("              if (marker.getAnimation() !== null) {\r\n");
      out.write("                marker.setAnimation(null);\r\n");
      out.write("              } else {\r\n");
      out.write("                marker.setAnimation(google.maps.Animation.BOUNCE);\r\n");
      out.write("              }\r\n");
      out.write("            } */\r\n");
      out.write("            \r\n");
      out.write("    //자동완성\r\n");
      out.write("        var card = document.getElementById('pac-card');\r\n");
      out.write("        var input = document.getElementById('searchVal');\r\n");
      out.write("        \r\n");
      out.write("        map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);\r\n");
      out.write("        var autocomplete = new google.maps.places.Autocomplete(input);\r\n");
      out.write("        // Bind the map's bounds (viewport) property to the autocomplete object,\r\n");
      out.write("        // so that the autocomplete requests use the current map bounds for the\r\n");
      out.write("        // bounds option in the request.\r\n");
      out.write("        autocomplete.bindTo('bounds', map);\r\n");
      out.write("        // Set the data fields to return when the user selects a place.\r\n");
      out.write("        autocomplete.setFields(\r\n");
      out.write("            ['address_components', 'geometry', 'icon', 'name']);\r\n");
      out.write("        var infowindow = new google.maps.InfoWindow();\r\n");
      out.write("        var infowindowContent = document.getElementById('infowindow-content');\r\n");
      out.write("        infowindow.setContent(infowindowContent);\r\n");
      out.write("        var marker = new google.maps.Marker({\r\n");
      out.write("          map: map,\r\n");
      out.write("          anchorPoint: new google.maps.Point(0, -29)\r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("        marker.addListener('click', function() {\r\n");
      out.write("            map.setZoom(20);\r\n");
      out.write("            map.setCenter(marker.getPosition());\r\n");
      out.write("            marker.setMap(null);\r\n");
      out.write("        },1000);\r\n");
      out.write("        autocomplete.addListener('place_changed', function() {\r\n");
      out.write("          infowindow.close();\r\n");
      out.write("          marker.setMap(null);\r\n");
      out.write("          var place = autocomplete.getPlace();\r\n");
      out.write("          if (!place.geometry) {\r\n");
      out.write("            // User entered the name of a Place that was not suggested and\r\n");
      out.write("            // pressed the Enter key, or the Place Details request failed.\r\n");
      out.write("            window.alert(\"No details available for input: '\" + place.name + \"'\");\r\n");
      out.write("            return;\r\n");
      out.write("          }\r\n");
      out.write("          // If the place has a geometry, then present it on a map.\r\n");
      out.write("          if (place.geometry.viewport) {\r\n");
      out.write("            map.fitBounds(place.geometry.viewport);\r\n");
      out.write("          } else {\r\n");
      out.write("            map.setCenter(place.geometry.location);\r\n");
      out.write("            map.setZoom(17);  // Why 17? Because it looks good.\r\n");
      out.write("          }\r\n");
      out.write("          marker.setPosition(place.geometry.location);\r\n");
      out.write("          marker.setMap(map);\r\n");
      out.write("          var address = '';\r\n");
      out.write("          if (place.address_components) {\r\n");
      out.write("            address = [\r\n");
      out.write("              (place.address_components[0] && place.address_components[0].short_name || ''),\r\n");
      out.write("              (place.address_components[1] && place.address_components[1].short_name || ''),\r\n");
      out.write("              (place.address_components[2] && place.address_components[2].short_name || '')\r\n");
      out.write("            ].join(' ');\r\n");
      out.write("          }\r\n");
      out.write("          infowindowContent.children['place-icon'].src = place.icon;\r\n");
      out.write("          infowindowContent.children['place-name'].textContent = place.name;\r\n");
      out.write("          infowindowContent.children['place-address'].textContent = address;\r\n");
      out.write("          infowindow.open(map, marker);\r\n");
      out.write("        });\r\n");
      out.write("}\r\n");
      out.write("    //위치 검색\r\n");
      out.write("    function search(){\r\n");
      out.write("        var request = {\r\n");
      out.write("            query: $(\"#searchVal\").val(),\r\n");
      out.write("            fields: ['name', 'geometry'],\r\n");
      out.write("          };\r\n");
      out.write("          var service = new google.maps.places.PlacesService(map);\r\n");
      out.write("          service.findPlaceFromQuery(request, function(results, status) {\r\n");
      out.write("            if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n");
      out.write("/*            for (var i = 0; i < results.length; i++) {\r\n");
      out.write("                createMarker(results[i]);\r\n");
      out.write("              } */\r\n");
      out.write("              map.setCenter(results[0].geometry.location);\r\n");
      out.write("            }\r\n");
      out.write("          });\r\n");
      out.write("    }\r\n");
      out.write("/*     function createMarker(place) {\r\n");
      out.write("        var marker = new google.maps.Marker({\r\n");
      out.write("          map: map,\r\n");
      out.write("          position: place.geometry.location\r\n");
      out.write("        });\r\n");
      out.write("    } */\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("function setLocation(){\r\n");
      out.write("\t//부모창 frm에 접근하기(opener)\r\n");
      out.write("\tvar frm = opener.document.addMap;\r\n");
      out.write("\t\r\n");
      out.write("\tfrm.ncode.value = $(\"#ncode\").val();\r\n");
      out.write("\tfrm.inlat.value = $(\"#inlat\").text();\r\n");
      out.write("\tfrm.inlng.value = $(\"#inlng\").text();\r\n");
      out.write("\tfrm.placeid.value = $(\"#placeid\").val();\r\n");
      out.write("\tfrm.pname.value = $(\"#pname\").val();\r\n");
      out.write("\t\r\n");
      out.write("\tself.close();\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("    \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div id=\"infowindow-content\">\r\n");
      out.write("      <img src=\"\" width=\"16\" height=\"16\" id=\"place-icon\">\r\n");
      out.write("      <span id=\"place-name\"  class=\"title\"></span><br>\r\n");
      out.write("      <span id=\"place-address\"></span>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    <!-- <form action=\"#\" onsubmit=\"search()\" id=\"pac-card\"> -->\r\n");
      out.write("    <div id=\"pac-card\">\r\n");
      out.write("          <div id=\"pac-container\">\r\n");
      out.write("            <input type=\"text\" id=\"searchVal\" name=\"q\" value=\"\" class=\"address_input\" size=\"40\"  method=post />\r\n");
      out.write("          </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div id=\"map_canvas\"></div>\r\n");
      out.write("    \r\n");
      out.write("    <table border=\"1\" style=\"display:none;\">\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td colspan=\"2\"></td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th width=\"100\">위도</th>\r\n");
      out.write("            <td id=\"inlat\"></td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>경도</th>\r\n");
      out.write("            <td id=\"inlng\"></td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        \r\n");
      out.write("        <tr>  \r\n");
      out.write("            <th>국가코드</th>\r\n");
      out.write("            <td><input type=\"text\" id=\"ncode\" name=\"ncode\" value=\"\" size=\"50\"/></td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>  \r\n");
      out.write("            <th>placeId</th>\r\n");
      out.write("            <td><input type=\"text\" id=\"placeid\" name=\"placeid\" value=\"\" size=\"50\"/></td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>  \r\n");
      out.write("            <th>장소이름</th>\r\n");
      out.write("            <td><input type=\"text\" id=\"pname\" name=\"pname\" value=\"\" size=\"50\"/></td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>  \r\n");
      out.write("            <th>주소</th>\r\n");
      out.write("            <td><input type=\"text\" id=\"address\" value=\"\" size=\"50\"/></td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>  \r\n");
      out.write("            <th>phone</th>\r\n");
      out.write("            <td><input type=\"text\" id=\"phone\" value=\"\" size=\"50\"/></td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>  \r\n");
      out.write("            <th>website</th>\r\n");
      out.write("            <td><input type=\"text\" id=\"website\" value=\"\" size=\"50\"/></td>\r\n");
      out.write("        </tr>\r\n");
      out.write("    </table>\r\n");
      out.write("    <button id=\"setLocationBtn\" onclick=\"setLocation();\">확인</button>\r\n");
      out.write("\r\n");
      out.write("    <div id=\"photo\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
